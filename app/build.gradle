apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-allopen'
apply plugin: 'jacoco'
apply plugin: "de.mannodermaus.android-junit5"

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    defaultConfig {
        multiDexEnabled true
        aaptOptions.cruncherEnabled = false

        applicationId "com.demo.biometric"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    compileOptions {
        setSourceCompatibility(JavaVersion.VERSION_1_8)
        setTargetCompatibility(JavaVersion.VERSION_1_8)
    }

    buildFeatures {
        viewBinding true
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            lintOptions.checkReleaseBuilds false
            initWith debug
            jniDebuggable true
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            lintOptions.checkReleaseBuilds false
            initWith release
            minifyEnabled true
            shrinkResources true
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        def flavorName = variant.productFlavors[0].name

        def apkName = "LiarGame"
        if (flavorName != "real")
            apkName = "LG-${variant.productFlavors[0].name.toUpperCase()}"

        if (variant.buildType.name == "debug") apkName = "Debug-${apkName}"

        variant.outputs.all {
            outputFileName = "$apkName-${variant.versionName}.apk"
        }
    }

    flavorDimensions "default"
    productFlavors {
        real {
            dimension "default"
            manifestPlaceholders = [appNameGradle: "@string/app_name"]
            manifestPlaceholders = [appLabel: "@string/app_name"]

            buildConfigField "String", "restApiServer", "\"http://192.168.0.4:3000/api/\""
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
        main {
            assets.srcDirs = ['src/main/res/raw']
        }

        androidTest.kotlin.srcDirs += "src/test-common/kotlin"
        test.kotlin.srcDirs += "src/test-common/kotlin"
        main.java.srcDirs += 'src/main/kotlin'
    }

    splits {
        abi {
            enable true
            reset()
//            include 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
            universalApk true
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true

            all {
                useJUnitPlatform()

                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }

        testOptions {
            junitPlatform {
                // Don't raise errors about incorrect configuration
                // of JUnit 5 instrumentation tests
                instrumentationTests.integrityCheckEnabled = false
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            suppressWarnings = true
            jvmTarget = '1.8'
            jvmTarget = JavaVersion.VERSION_1_8
            apiVersion = '1.4'
            languageVersion = '1.4'
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation 'com.google.firebase:firebase-database-ktx:20.0.3'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_vintage_version"

    androidTestImplementation "de.mannodermaus.junit5:android-test-core:$mannodermaus_junit5_version"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:$mannodermaus_junit5_version"

    androidTestImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_junit_version"
    testImplementation 'io.mockk:mockk:1.10.6'
    androidTestImplementation 'io.mockk:mockk-agent-android:1.10.6'
    testImplementation 'org.mockito:mockito-inline:3.5.13'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.1'
    androidTestImplementation 'com.google.truth:truth:1.1.2'
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_espresso_version"

    implementation "androidx.multidex:multidex:$androidx_multidex_version"
    implementation "androidx.core:core-ktx:$androidx_core_ktx_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.cardview:cardview:$androidx_cardview_version"
    implementation "androidx.browser:browser:$androidx_browser_version"
    implementation "androidx.annotation:annotation:$androidx_version"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraint_layout_version"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$arch_lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.4.0"

    implementation "androidx.room:room-runtime:$arch_room_version"
    implementation "androidx.room:room-ktx:$arch_room_version"
    annotationProcessor "androidx.room:room-compiler:$arch_room_version"
    kapt "androidx.room:room-compiler:$arch_room_version"

    implementation "androidx.work:work-runtime-ktx:$arch_workmanager_version"
    implementation "androidx.work:work-rxjava2:$arch_workmanager_version"
    implementation "androidx.work:work-gcm:$arch_workmanager_version"

    testImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    testImplementation "androidx.room:room-testing:$arch_room_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation "com.google.android.material:material:$design_support_version"

    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:annotations:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "com.orhanobut:logger:$logger_version"
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'

    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"

    implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp3_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'androidx.biometric:biometric:1.1.0'
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/AppFireBaseMessagingService.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    getClassDirectories().setFrom(([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}